class Solution {
    public int numSubmatrixSumTarget(int[][] matrix, int target) {
         int rows = matrix.length, cols = matrix[0].length;
        int[][] preSum = new int[rows + 1][cols + 1];
        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= cols; j++) {
                preSum[i][j] = preSum[i - 1][j] + preSum[i][j - 1] - preSum[i - 1][j - 1] + matrix[i - 1][j - 1];
            }
        }

        int count = 0;
        for (int top = 0; top < rows; top++) {
            for (int bottom = top + 1; bottom <= rows; bottom++) {
                Map<Integer, Integer> map = new HashMap<>();
                // Initialize the value of map
                map.put(0, 1);
                for (int k = 1; k <= cols; k++) {
                    int sum = preSum[bottom][k] - preSum[top][k];
                    count += map.getOrDefault(sum - target, 0);
                    map.put(sum, map.getOrDefault(sum, 0) + 1);
                }
            }
        }
        return count;
    }
}
